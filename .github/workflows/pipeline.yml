name: Java CI with Maven
on:
  push:
    branches: [ "master", "dev" ]

jobs:
  snyk-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical

  versioning:
    runs-on: ubuntu-24.04
    needs:
    - snyk-test
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Fetch last tags and set version
      id: version
      run: |
        git fetch --tags
        VERSION=$(git tag | sort -V | tail -n 1)
        echo "My Latest version: $VERSION"
        
        VERSION_PARTS=(${VERSION//./ })
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        NEW_PATCH_NUM=$((PATCH + 1))
        NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH_NUM}"
        mvn versions:set -DnewVersion=$NEW_VERSION
        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
        echo "::set-output name=new_version::$NEW_VERSION"
        echo "Final new_version=$NEW_VERSION"
    - name: Push new tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        NEW_TAG=${{ env.new_version }}
        git tag $NEW_TAG
        git push origin $NEW_TAG


  Trivy-docker-file:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Scan Dockerfile with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          vuln-type: 'os, library'
          severity: 'CRITICAL,HIGH'




  Build-and-Login:
    runs-on: ubuntu-24.04
    needs:
      - versioning
      - Trivy-docker-file
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to Docker-Hub
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: matankaufman/maven-hello-world:${{ needs.versioning.outputs.new_version }}

      - name: Pull and Run from DockerHub
        run: |
          docker pull matankaufman/maven-hello-world:${{ needs.versioning.outputs.new_version }}
          docker run --name maven_hello_world matankaufman/maven-hello-world:${{ needs.versioning.outputs.new_version }}

#  sonarqube-analysis:
#    runs-on: ubuntu-24.04
#    if: |
#      github.event_name == 'push' && github.ref_name == 'master'
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Install Maven 3.9.2
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y maven
#          mvn --version
#
#      - name: Cache SonarQube packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      - name: Cache Maven packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      - name: Build and analyze
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#        run:  mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=simple-maven-app
